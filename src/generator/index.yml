uploadImage:
    handler: src/generator/handler/uploadImage.handler
    name: ${file(resource/index.json):generator.uploadImageLambdaName}
    description: 'receive an image and save to s3'
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-upload-image
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
    events:
      - httpApi:
          path: /upload
          method: POST
          authorizer: 
            name: customAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource:
          - !Join [ "/", [!GetAtt OriginSourceBucket.Arn, "*"]]
    environment:
      RESIZED_SOURCE_BUCKET: !Ref ResizedSourceBucket
      SOURCE_BUCKET: !Ref OriginSourceBucket

resizeImage:
    handler: src/generator/handler/resizeImage.handler
    name: ${file(resource/index.json):generator.resizeImageLambdaName}
    description: 'resize an image and save to s3'
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-resize-image
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
    events:
      - s3:
          bucket: !Ref OriginSourceBucket
          event: s3:ObjectCreated:*
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource:
          - !Join [ "/", [!GetAtt ResizedSourceBucket.Arn, "*"]]
      - Effect: Allow
        Action:
          - "s3:Get*"
          - "s3:Head*"
        Resource:
          - !Join [ "/", [!GetAtt OriginSourceBucket.Arn, "*"]]
    environment:
      RESIZED_SOURCE_BUCKET: !Ref ResizedSourceBucket
      SOURCE_BUCKET: !Ref OriginSourceBucket